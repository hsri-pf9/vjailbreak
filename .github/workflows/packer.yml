name: Build and Push Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
        branch:
          description: 'Branch to use'
          required: true
          default: 'main'

env:
  PACKER_VERSION: "latest"
  QCOW2_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak
  UI_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak-ui
  V2V_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak-v2v-helper
  CONTROLLER_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak-controller

jobs:
  build-containers:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set environment variables for images
      run: |
        # Get the branch name, remove 'refs/heads/' from github.ref
        BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
        GIT_SHA=$(echo "$(git rev-parse --short HEAD)")
        GIT_BRANCH=$(echo "$(git rev-parse --abbrev-ref HEAD)")
        # if its a release event bump the version and use that as tag
        if [[ "${{ github.event_name }}" == "release" ]]; then
          # In case of release event the tag will be the next version
          # build version will be the same as tag
          TAG=${{ github.event.release.tag_name }}
          BUILD_VERSION=${TAG}
        else
          BUILD_VERSION=${{ github.run_number }}
          # build release version as version-branch-sha
          VERSION=${BUILD_VERSION}-${GIT_BRANCH}-${GIT_SHA}
          # Since this is a merge or pull-request 
          # use the TAG as the version
          TAG=${VERSION}
        fi

        echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "TAG=${TAG}" >> $GITHUB_ENV

        echo "QCOW2_IMG=${{ env.QCOW2_IMG }}:$TAG" >> $GITHUB_ENV
        echo "UI_IMG=${{ env.UI_IMG }}:$TAG" >> $GITHUB_ENV
        echo "V2V_IMG=${{ env.V2V_IMG }}:$TAG" >> $GITHUB_ENV
        echo "CONTROLLER_IMG=${{ env.CONTROLLER_IMG }}:$TAG" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.REGISTRY }}
        username: ${{ secrets.QUAY_ROBOT_USERNAME }}
        password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

    - name: Check Release Condition
      id: check_release
      run: |
        RELEASE_FOUND="false"
        
        # Check if it's a release event
        if [[ "${{ github.event_name }}" == "release" ]]; then
          RELEASE_FOUND="true"
        fi
        
        # Check if PR title contains 'release'
        if [[ "${{ github.event.pull_request.title }}" == *"release"* ]]; then
          RELEASE_FOUND="true"
        fi
        
        # Check if it's a manual trigger from main branch
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          RELEASE_FOUND="true"
        fi
        
        echo "release_found=${RELEASE_FOUND}" >> $GITHUB_ENV

    # Prepare build directories
    - name: Prepare build directories
      run: mkdir -p image_builder/deploy

    # Run all builds and preparations in parallel
    - name: Start parallel tasks
      run: |
        # Script to build UI image
        echo "#!/bin/bash
        make ui
        echo 'UI build completed'
        " > build_ui.sh
        
        # Script to build v2v-helper image
        echo "#!/bin/bash
        make v2v-helper
        echo 'v2v-helper build completed'
        " > build_v2v.sh
        
        # Script to build controller image
        echo "#!/bin/bash
        make -o v2v-helper vjail-controller
        echo 'Controller build completed'
        " > build_controller.sh
        
        # Script to prepare deployment files
        echo "#!/bin/bash
        make -C ./k8s/migration/ build-installer
        cp ./k8s/migration/dist/install.yaml image_builder/deploy/00controller.yaml
        cp -r ./k8s/kube-prometheus image_builder/deploy/
        echo 'Deploy prep completed'
        " > prep_deploy.sh
        
        # Script for QCOW2 preparation (only for release)
        if [[ "${{ env.release_found }}" == "true" ]]; then
          echo "#!/bin/bash
          # Enable KVM group perms
          echo 'KERNEL==\"kvm\", GROUP=\"kvm\", MODE=\"0666\", OPTIONS+=\"static_node=kvm\"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # Set up QEMU
          sudo apt-get update && sudo apt-get install qemu-system qemu-utils -y
          
          # Setup oras
          curl -LO https://github.com/oras-project/oras/releases/download/v1.1.0/oras_1.1.0_linux_amd64.tar.gz
          mkdir -p oras-install/
          tar -zxf oras_1.1.0_linux_amd64.tar.gz -C oras-install/
          sudo mv oras-install/oras /usr/local/bin/
          rm -rf oras_1.1.0_linux_amd64.tar.gz oras-install/
          
          # Download base image
          oras pull quay.io/platform9/vjailbreak:base-v0.1.4
          echo 'QCOW2 prep completed'
          " > prep_qcow2.sh
          
          chmod +x prep_qcow2.sh
          ./prep_qcow2.sh &
        fi
        
        # Make scripts executable and run them in parallel
        chmod +x build_ui.sh build_v2v.sh build_controller.sh prep_deploy.sh
        ./build_ui.sh &
        ./build_v2v.sh &
        ./build_controller.sh &
        ./prep_deploy.sh &
        
        # Wait for all background processes to complete
        wait
        echo "All parallel tasks completed"

    # Substitute tags in manifests after builds are done
    - name: Substitute image tags in manifests
      uses: danielr1996/envsubst-action@1.0.0
      with:
        input: ./ui/deploy/ui.yaml
        output: ./image_builder/deploy/01ui.yaml

    # Build QCOW2 if this is a release
    - name: Setup Packer
      if: env.release_found == 'true'
      uses: hashicorp/setup-packer@main
      with:
        version: ${{ env.PACKER_VERSION }}

    - name: Run Packer Init and Validate
      if: env.release_found == 'true'
      run: |
        packer init ./image_builder/vjailbreak-image.pkr.hcl
        packer validate ./image_builder/vjailbreak-image.pkr.hcl

    - name: Run Packer Build
      if: env.release_found == 'true'
      run: |
        mkdir -p vjailbreak_qcow2
        PACKER_LOG=1 packer build ./image_builder/vjailbreak-image.pkr.hcl

    - name: Upload vjailbreak qcow2 to quay
      if: env.release_found == 'true'
      run: |
        oras push ${{ env.QCOW2_IMG }} \
        --artifact-type="application/qcow2" \
        ./vjailbreak_qcow2/vjailbreak-image.qcow2
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vjailbreak-yamls
        path: |
          image_builder/deploy/00controller.yaml
          image_builder/deploy/01ui.yaml